/*
9 Implement DDA line drawing algorithm to draw Staircase line. Divide the screen
in four quadrants with center as (0, 0). The line should work for all the slopes
*/

#include <iostream>
#include <GL/glut.h>
#include <cmath>
using namespace std;

// Window boundaries for four quadrants
int xl = 50, xh = 200, yl = 50, yh = 200;
int flag = 0;
float u1, v1, u2, v2;

// Initialize OpenGL window settings
void init() {
    glClearColor(1, 1, 1, 0);  // White background
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0, 0, 0);        // Black color for lines
}

// DDA Staircase Line drawing algorithm
void staircaseLine(float u1, float v1, float u2, float v2) {
    float dx = u2 - u1, dy = v2 - v1;
    int steps = max(abs(dx), abs(dy));
    float xi = dx / steps, yi = dy / steps;

    glBegin(GL_POINTS);
    glVertex2f(u1, v1); // Start point

    for (int i = 0; i < steps; i++) {
        // Add steps: Adjust one coordinate in one step (horizontal or vertical)
        if (abs(dx) > abs(dy)) {
            u1 += xi;
        } else {
            v1 += yi;
        }

        // Display the point
        glVertex2f(u1, v1);
    }

    glEnd();
    glFlush();
}

// Draw the clipping window (rectangle)
void drawWindow() {
    staircaseLine(50, 50, 200, 50);  // Top boundary
    staircaseLine(50, 50, 50, 200);  // Left boundary
    staircaseLine(200, 50, 200, 200);  // Right boundary
    staircaseLine(50, 200, 200, 200);  // Bottom boundary
}

// Mouse click to capture points for drawing
void myMouse(int button, int state, int x, int y) {
    glColor3f(0, 0, 0); // Set color to black
    if (state == GLUT_DOWN && flag == 0) {
        u1 = x;
        v1 = 480 - y;  // Flip y-coordinate to match OpenGL coordinates
        flag = 1;
    } else if (state == GLUT_DOWN && flag == 1) {
        u2 = x;
        v2 = 480 - y;
        flag = 2;
        staircaseLine(u1, v1, u2, v2);  // Draw staircase line
    }
}

// Keyboard function for resetting the window
void myKey(unsigned char key, int x, int y) {
    if (key == 'r') {  // Reset the window
        init();
        drawWindow();
        flag = 0;
    }
}

// Main function
int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE);
    glutInitWindowSize(640, 480);
    glutCreateWindow("DDA Staircase Line");

    gluOrtho2D(0, 640, 0, 480);  // Set up the orthographic projection

    init();
    drawWindow();
    glutMouseFunc(myMouse);      // Capture mouse click for points
    glutKeyboardFunc(myKey);     // Capture keyboard input for reset

    glutMainLoop();  // Start the GLUT event loop
    return 0;
}
